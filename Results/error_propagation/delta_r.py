import numpy as np
import matplotlib.pyplot as plt

def ds_dk1(k4, k5, k6, r0, q):
    return r0**2*q/(1+k4*r0**2+k5*r0**4+k6*r0**6)


def ds_dk2(k4, k5, k6, r0, q):
    return r0**4*q/(1+k4*r0**2+k5*r0**4+k6*r0**6)


def ds_dk3(k4, k5, k6, r0, q):
    return -r0**6*q/(1+k4*r0**2+k5*r0**4+k6*r0**6)


def ds_dk4(k1, k2, k3, k4, k5, k6, r0, q):
    return -r0**2*q*(1+k1*r0**2+k2*r0**4+k3*r0**6)/(1+k4*r0**2+k5*r0**4+k6*r0**6)**2


def ds_dk5(k1, k2, k3, k4, k5, k6, r0, q):
    return -r0**4*q*(1+k1*r0**2+k2*r0**4+k3*r0**6)/(1+k4*r0**2+k5*r0**4+k6*r0**6)**2


def ds_dk6(k1, k2, k3, k4, k5, k6, r0, q):
    return -r0**6*q*(1+k1*r0**2+k2*r0**4+k3*r0**6)/(1+k4*r0**2+k5*r0**4+k6*r0**6)**2


def dr_dx(x, y, fx, fy):
    return fx**2*x/(np.sqrt((fx*x)**2+(fy*y)**2))


def dr_dy(x, y, fx, fy):
    return fy**2*y/(np.sqrt((fx*x)**2+(fy*y)**2))


def delta_x(k1, k2, k3, k4, k5, k6, p1, p2, s1, s2, dk1, dk2, dk3, dk4, dk5, dk6, dp1, dp2, ds1, ds2, r0, x, y):
    su = (ds_dk1(k4, k5, k6, r0, x)*dk1)**2\
         + (ds_dk2(k4, k5, k6, r0, x)*dk2)**2\
         + (ds_dk3(k4, k5, k6, r0, x)*dk3)**2\
         + (ds_dk4(k1, k2, k3, k4, k5, k6, r0, x)*dk4)**2\
         + (ds_dk5(k1, k2, k3, k4, k5, k6, r0, x)*dk5)**2\
         + (ds_dk6(k1, k2, k3, k4, k5, k6, r0, x)*dk6)**2\
         + (2*x*y*dp1)**2\
         + ((r0**2 + 2*x**2)*dp2)**2\
         + (r0**2*ds1)**2\
         + (r0**4*ds2)
         
    return np.sqrt(su)


def delta_y(k1, k2, k3, k4, k5, k6, p1, p2, s3, s4, dk1, dk2, dk3, dk4, dk5, dk6, dp1, dp2, ds3, ds4, r0, x, y):
    su = (ds_dk1(k4, k5, k6, r0, y)*dk1)**2\
         + (ds_dk2(k4, k5, k6, r0, y)*dk2)**2\
         + (ds_dk3(k4, k5, k6, r0, y)*dk3)**2\
         + (ds_dk4(k1, k2, k3, k4, k5, k6, r0, y)*dk4)**2\
         + (ds_dk5(k1, k2, k3, k4, k5, k6, r0, y)*dk5)**2\
         + (ds_dk6(k1, k2, k3, k4, k5, k6, r0, y)*dk6)**2\
         + ((r0**2 + 2*y**2)*dp1)**2\
         + (2*x*y*dp2)**2\
         + (r0**2*ds3)**2\
         + (r0**4*ds4)
         
    return np.sqrt(su)


def x_dist(k1, k2, k3, k4, k5, k6, p1, p2, s1, s2, r0, x, y):
    ret = x*(1+k1*r0**2+k2*r0**4+k3*r0**6)/(1+k4*r0**2+k5*r0**4+k6*r0**6)\
          + 2*p1*x*y + p2*(r0**2+2*x**2)\
          + s1*r0**2 + s2*r0**4
   
    return ret


def y_dist(k1, k2, k3, k4, k5, k6, p1, p2, s3, s4, r0, x, y):
    ret = y*(1+k1*r0**2+k2*r0**4+k3*r0**6)/(1+k4*r0**2+k5*r0**4+k6*r0**6)\
          + 2*p2*x*y + p1*(r0**2+2*y**2)\
          + s3*r0**2 + s4*r0**4
                 
    return ret


def delta_r(k1, k2, k3, k4, k5, k6, p1, p2, s1, s2, s3, s4, dk1, dk2, dk3, dk4, dk5, dk6, dp1, dp2, ds1, ds2, ds3, ds4, x, y, fx, fy):
    r0 = np.sqrt(x**2+y**2)
    x_d = x_dist(k1, k2, k3, k4, k5, k6, p1, p2, s1, s2, r0, x, y)
    y_d = y_dist(k1, k2, k3, k4, k5, k6, p1, p2, s3, s4, r0, x, y)
   
    su = (dr_dx(x_d, y_d, fx, fy)*delta_x(k1, k2, k3, k4, k5, k6, p1, p2, s1, s2, dk1, dk2, dk3, dk4, dk5, dk6, dp1, dp2, ds1, ds2, r0, x, y))**2\
         + (dr_dy(x_d, y_d, fx, fy)*delta_y(k1, k2, k3, k4, k5, k6, p1, p2, s3, s4, dk1, dk2, dk3, dk4, dk5, dk6, dp1, dp2, ds3, ds4, r0, x, y))**2
    
    return np.sqrt(su)

if __name__ == '__main__':
    # old calibration (all coeffs)
    # fx = 2637.985699648917
    # fy = 2625.49297450469

    # k1 = 3.040385605139034
    # dk1 = 5.1462208017581865
    # k2 = 44.30794556950035
    # dk2 = 7.498362391451974
    # k3 = -16.99730324687166
    # dk3 = 77.61078622587156
    # k4 = 2.9926553898411568
    # dk4 = 5.1607915758662255
    # k5 = 42.49884103390419
    # dk5 = 7.960473469068812
    # k6 = -14.162212054178292
    # dk6 = 77.77926479372928

    # p1 = 0.0017411637911572855
    # dp1 = 0.0006453874137069301
    # p2 = 0.0036665740452514785
    # dp2 = 0.000638190921631652

    # s1 = -0.003193024693088454
    # ds1 = 0.0004624487987501941
    # s2 = -0.003204973489792356
    # ds2 = 0.0013482766757503411
    # s3 = -0.002245391854678341
    # ds3 = 0.0005166761897842433
    # s4 = 0.0014034644219210178
    # ds4 = 0.0010331189754853676

    # fixed calibration (backlight)
    # fx = 2639.301176389017
    # fy = 2627.193359255329

    # k1 = 33.09603922574103
    # dk1 = 2.6951935693205833
    # k2 = 2.8740817957437543
    # dk2 = 13.165604116744218
    # k3 = 486.7236026986893
    # dk3 = 0.4243317980343514
    # k4 = 33.07013143066285
    # dk4 = 2.7188014289814695
    # k5 = -2.875467741744779
    # dk5 = 12.44181065489124
    # k6 = 488.06046666878865
    # dk6 = 1.1551790992110766

    # p1 = -0.005017296504467028
    # dp1 = 0.0005791549583326669
    # p2 = -0.0005662025110070784
    # dp2 = 0.00048343735060938454

    # s1 =  0.0021576851722175873
    # ds1 = 0.00046429194429026553
    # s2 = -0.0006655106257274845
    # ds2 = 0.0008197823257161494
    # s3 =  0.005948144380528923
    # ds3 = 0.0005564295510000818
    # s4 = -0.0004288206691947806
    # ds4 = 0.000801563789694268
  
    # fixed calibration (ohne backlight)
    # fx = 2631.3004233697116
    # fy = 2618.0623084283557

    # k1 = 45.16648717734248
    # dk1 = 2.0924848969319747
    # k2 = -17.389738139293847
    # dk2 = 10.46553989324286
    # k3 = 612.4048693949271
    # dk3 = 0.42342251108611834
    # k4 = 45.19524763356788
    # dk4 = 2.11499982353542
    # k5 = -24.685370009833044
    # dk5 = 9.8909631455574
    # k6 = 615.9079340057223
    # dk6 = 1.1470184110079535

    # p1 = -0.0017384398312504051
    # dp1 = 0.00041892522635333864
    # p2 = -0.0009179750858087188
    # dp2 = 0.000298064418115128

    # s1 = 0.0031146608700393977
    # ds1 = 0.0003673658776556442
    # s2 = -0.0031597094230822525
    # ds2 = 0.000544743359199151
    # s3 = 0.0007963790633390411
    # ds3 = 0.000502427737195905
    # s4 = 0.00025553613864095224
    # ds4 = 0.00048094359438608734
    
    # lowdist calibration
    fx = 2458.6565656069683
    fy = 2451.7320811144314

    k1 = 1.3672667336317217
    dk1 = 4.2748451862107695
    k2 = 6.715980775847605
    dk2 = 3.0567449793133505
    k3 = -3.395001986561697
    dk3 = 4.51438202930006
    k4 = 1.3579099223402136
    dk4 = 4.281622997999524
    k5 = 6.565265031742474
    dk5 = 3.1468153130162473
    k6 = -3.1520558511913306
    dk6 = 4.675469273113999

    p1 = -0.004737690858573556
    dp1 = 0.000814416228337301
    p2 = -0.0038807607269435484
    dp2 = 0.0006217627126669166

    s1 = 0.002566024821399294
    ds1 = 0.0004712621428145582
    s2 = 0.0013707094414627014
    ds2 = 0.00041698707558140773
    s3 = 0.0059330257973507
    ds3 = 0.0007523239699711821
    s4 = -0.0002442978906029459
    ds4 = 0.00037454130147800976
 
    res = 1
    x = np.arange(0, 2464/2, res)
    y = np.arange(0, 3280/2, res/2464*3280)
    
    dr = delta_r(k1, k2, k3, k4, k5, k6, p1, p2, s1, s2, s3, s4, dk1, dk2, dk3, dk4, dk5, dk6, dp1, dp2, ds1, ds2, ds3, ds4, x/fx, y/fy, fx, fy)
       
    plt.plot(np.sqrt(x**2+y**2), dr, label='dr')
    plt.legend()
    plt.grid(True)
    